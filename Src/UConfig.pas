{
 * This Source Code Form is subject to the terms of the Mozilla Public License,
 * v. 2.0. If a copy of the MPL was not distributed with this file, You can
 * obtain one at http://mozilla.org/MPL/2.0/
 *
 * Copyright (C) 2007-2012, Peter Johnson (www.delphidabbler.com).
 *
 * $Rev$
 * $Date$
 *
 * Implements class that stores program's configuration information.
}


unit UConfig;


interface

uses
  SysUtils, Classes;

type

  {
  TInputSource:
    Enumerates different sources of input used by program.
  }
  TInputSource = (
    isStdIn,        // standard input
    isFiles,        // files from command line
    isClipboard     // clipboard
  );

  {
  TOutputSink:
    Enumerates different output sinks used by program
  }
  TOutputSink = (
    osStdOut,       // standard output
    osFile,         // file from output file switch
    osClipboard     // clipboard
  );

  // Enumerates ids of supported output encodings
  TOutputEncodingId = (
    oeUTF8,         // UTF-8 encoding with BOM
    oeUTF16,        // Unicode little endian encoding with BOM
    oeWindows1252,  // Windows-1252 aka Latin 1 encoding
    oeISO88591      // ISO-8859-1 encoding
  );

  // Enumerates possible sources of style sheets
  TCSSSource = (
    csDefault,      // use default style sheet
    csFile,         // get CSS from file
    csLink          // link to external style sheet
  );

  {
  TDocType:
    Enumerates various kinds of documents that can be generated by program.
  }
  TDocType = (
    dtXHTML,        // complete XHTML document
    dtXHTMLFragment // a fragment of HTML code, with no embedded style sheet
  );

  TVerbosity = (
    vbQuiet,
    vbNormal
  );

  TSeparatorLines = 0..16;

  TLineNumberWidth = 1..6;

  {
  TConfig:
    Class that records details of program's configuration. Used to determine
    how program behaves.
  }
  TConfig = class(TObject)
  private
    fDocType: TDocType;           // Value of DocType property
    fInputSource: TInputSource;   // Value of InputSource property
    fOutputSink: TOutputSink;     // Value of OutputSink property
    fShowHelp: Boolean;           // Values of ShowHelp property
    fVerbosity: TVerbosity;
    fHideCSS: Boolean;
    fOutputFile: string;
    fLanguage: string;
    fTitle: string;
    fBrandingPermitted: Boolean;
    fCSSSource: TCSSSource;
    fCSSLocation: string;
    fOutputEncodingId: TOutputEncodingId;
    fTrimSource: Boolean;
    fInFiles: TStringList;
    fSeparatorLines: TSeparatorLines;
    fLegacyCSSNames: Boolean;
    fUseLineNumbering: Boolean;
    fLineNumberWidth: TLineNumberWidth;
    fLineNumberPadding: Char;
    fStriping: Boolean;
    function GetInputFiles: TArray<string>;
  public
    constructor Create;
      {Class constructor. Initialises object's default property values.
      }
    destructor Destroy; override;
    property InputSource: TInputSource
      read fInputSource write fInputSource default isStdIn;
      {Describes source to be used for program's input}
    property OutputSink: TOutputSink
      read fOutputSink write fOutputSink default osStdOut;
      {Describes destination of program's output}
    property DocType: TDocType
      read fDocType write fDocType default dtXHTML;
      {Type of document to be generated}
    property Verbosity: TVerbosity
      read fVerbosity write fVerbosity default vbNormal;

      {Whether program is to display project progress on console. Setting Quiet
      to true inhibits visual output}
    property ShowHelp: Boolean
      read fShowHelp write fShowHelp default False;
      {Whether program is to display help}
    property HideCSS: Boolean read fHideCSS write fHideCSS;
    property CSSSource: TCSSSource read fCSSSource write fCSSSource;
    property CSSLocation: string read fCSSLocation write fCSSLocation;
      {Location of CSS file to embed or URL to link}
    property OutputFile: string
      read fOutputFile write fOutputFile;
    property OutputEncodingId: TOutputEncodingId
      read fOutputEncodingId write fOutputEncodingId default oeUTF8;
    property Language: string read fLanguage write fLanguage;
    property Title: string read fTitle write fTitle;
    property InputFiles: TArray<string> read GetInputFiles;
    property BrandingPermitted: Boolean
      read fBrandingPermitted write fBrandingPermitted default True;
    property TrimSource: Boolean
      read fTrimSource write fTrimSource default True;
    property SeparatorLines: TSeparatorLines
      read fSeparatorLines write fSeparatorLines default 1;
    property LegacyCSSNames: Boolean
      read fLegacyCSSNames write fLegacyCSSNames default False;
    property UseLineNumbering: Boolean
      read fUseLineNumbering write fUseLineNumbering default False;
    property LineNumberWidth: TLineNumberWidth
      read fLineNumberWidth write fLineNumberWidth default 3;
    property LineNumberPadding: Char
      read fLineNumberPadding write fLineNumberPadding default ' ';
    property Striping: Boolean read fStriping write fStriping default False;
    procedure AddInputFile(const FN: string);
    function OutputEncoding: TEncoding;
    function OutputEncodingName: string;
  end;


implementation

uses
  Windows;


{ TConfig }

procedure TConfig.AddInputFile(const FN: string);
begin
  fInFiles.Add(FN);
end;

constructor TConfig.Create;
  {Class constructor. Initialises object's default property values.
  }
begin
  inherited;
  fInFiles := TStringList.Create;
  fInputSource := isStdIn;
  fOutputSink := osStdOut;
  fDocType := dtXHTML;
  fShowHelp := False;
  fHideCSS := False;
  fOutputEncodingId := oeUTF8;
  fBrandingPermitted := True;
  fLanguage := '';
  fVerbosity := vbNormal;
  fTrimSource := True;
  fSeparatorLines := 1;
  fLegacyCSSNames := False;
  fUseLineNumbering := False;
  fLineNumberWidth := 3;
  fLineNumberPadding := ' ';
  fStriping := False;
end;

destructor TConfig.Destroy;
begin
  fInFiles.Free;
  inherited;
end;

function TConfig.GetInputFiles: TArray<string>;
var
  Idx: Integer;
begin
  SetLength(Result, fInFiles.Count);
  for Idx := 0 to Pred(fInFiles.Count) do
    Result[Idx] := fInFiles[Idx];
end;

function TConfig.OutputEncoding: TEncoding;
begin
  Result := nil;
  if not (fOutputSink in [osStdOut, osFile]) then
    Exit;
  case fOutputEncodingId of
    oeUTF8: Result := TEncoding.UTF8;
    oeUTF16: Result := TEncoding.Unicode;
    oeWindows1252: Result := TMBCSEncoding.Create(1252);
    oeISO88591: Result := TMBCSEncoding.Create(28591);
  end;
  Assert(Assigned(Result), 'TConfig.OutputEncoding: Encoding not created');
end;

function TConfig.OutputEncodingName: string;
const
  Map: array[TOutputEncodingId] of string = (
    'UTF-8', 'UTF-16', 'Windows-1252', 'ISO-8859-1'
  );
begin
  if not (fOutputSink in [osStdOut, osFile]) then
    Exit('');
  Result := Map[fOutputEncodingId];
end;

end.

